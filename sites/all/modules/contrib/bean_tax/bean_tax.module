<?php
/**
 * @file
 * Code for Bean Taxonomy Plugins.
 */

/**
 * Implements hook_bean_types_api_info().
 */
function bean_tax_bean_types_api_info() {
  return array('api' => 4);
}

/**
 * Implements hook_bean_types().
 */
function bean_tax_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'bean_tax') . '/plugins';
  $plugins['bean_tax_listing'] = array(
    'label' => t('Taxonomy Term List'),
    'description' => t('A list of terms assigned to the current page through taxonomy; filtered by taxonomy vocabulary.'),
    'handler' => array(
      'class' => 'TaxListingBean',
      'parent' => 'bean',
    ),
    'path' => $plugin_path,
    'file' => 'TaxListingBean.class.php'
  );
  $plugins['bean_tax_related'] = array(
    'label' => t('Taxonomy Related'),
    'description' => t('A list of entities related to the current page using term reference; sorted by number of matching terms.'),
    'handler' => array(
      'class' => 'TaxRelatedBean',
      'parent' => 'bean',
    ),
    'path' => $plugin_path,
    'file' => 'TaxRelatedBean.class.php',
  );
  return $plugins;
}

/**
 * Implements hook_theme().
 */
function bean_tax_theme() {
  $items = array();
  $items['bean_tax_more_link'] = array(
    'arguments' => array(
      'text' => NULL,
      'path'  => NULL,
    ),
    'file' => 'bean_tax.theme.inc',
  );
  return $items;
}

/**
 * Function returns all available view modes for a given entity.
 */
function bean_tax_get_entity_view_modes($entity_info, $entity_type) {
  foreach ($entity_info[$entity_type]['view modes'] as $key => $value) {
    $entity_view_modes[$key] = $value['label'];
  }
  return $entity_view_modes;
}

/**
 * Function returns all available bundles for a given entity.
 */
function bean_tax_get_entity_bundles($entity_type) {
  $bundle_types = field_info_bundles();
  $bundles_array = array();
  foreach ($bundle_types[$entity_type] as $key => $value) {
    $bundles_array[$key] = $key;
  }
  return $bundles_array;
}

/**
 * Function to return all tid using from a provided entity id.
 */
function bean_tax_get_entity_terms($entity_type, $entity_id) {
  $query = db_select('taxonomy_entity_index', 't');
  $query->join('taxonomy_term_data', 'td', 'td.tid = t.tid');
  $query->addField('t', 'tid');
  $query->condition('t.entity_id', $entity_id);
  $query->condition('t.entity_type', $entity_type);
  return $query->execute()->fetchAllAssoc('tid');
}

/**
 * Function call node comparison.
 */
function bean_tax_cmp($a, $b) {
  return $b["score"] - $a["score"];
}

/**
 * Form validation function for numeric fields.
 */
function bean_tax_setting_is_numeric($element, &$form_state) {
  if (!is_numeric($element['#value'])) {
    form_error($element, t('The "@name" option must be a valid number.', array('@name' => t($element['#title']))));
  }
}

/**
 * Callback element needs only select the portion of the form to be updated.
 */
function bean_tax_entity_type_callback($form, $form_state) {
  return $form['settings'];
}

/**
 * Determine current menu object type and return the entity with related terms.
 */
function bean_tax_active_entity_array($active = 'page') {
  $active_entity = array();
  switch ($active) {
  case "user":
    global $user;
    if ($active_entity['object'] = user_load($user->uid)) {
      $active_entity['ids']   = entity_extract_ids('user', $active_entity['object']);
      $active_entity['terms'] = bean_tax_get_entity_terms('user', $active_entity['ids'][0]);
      $active_entity['type']  = 'user';
    }
    break;
  case "page":
    $entity_info = entity_get_info();
    foreach ($entity_info as $key => $value) {
      if ($active_entity['object'] = bean_tax_menu_get_object($key)) {
        $active_entity['ids']   = entity_extract_ids($key, $active_entity['object']);
        $active_entity['terms'] = bean_tax_get_entity_terms($key, $active_entity['ids'][0]);
        $active_entity['type']  = $key;
        break;
      }
    }
    break;
  }
  return $active_entity;
}

/**
 * Get entity object by searching through the found wildcards.
 */
function bean_tax_menu_get_object($type = 'node') {
  $router_item = menu_get_item();
  $path_parts = arg(NULL, $router_item['path']);

  // Search the wildcards in the path.
  $possible_positions = array_keys($path_parts, '%');
  foreach ($possible_positions as $position) {
    // Try to see if the loader function is just $type.*_load which is usually
    // the case.
    if (isset($router_item['load_functions'][$position]) && !empty($router_item['map'][$position]) && preg_match("/^" . $type . ".*_load$/", $router_item['load_functions'][$position])) {
      return $router_item['map'][$position];
    }
  }
}
